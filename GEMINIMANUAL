[GEMINI INTERNAL SPECIFICATION] My Novel Engine v1.1
1.0 Core Architecture & Data Flow
Primary Viewport (Static): 1280x720, Phaser.Scale.FIT. All layout coordinates in Layout.js are relative to this resolution.
Boot Sequence:
main.js: Instantiates Phaser.Game. Scene array registration only.
PreloadScene:
Instantiates ConfigManager.
Registers configManager instance to this.sys.registry.
Loads asset_define.json.
Loads initial scenario files (scene1.ks, etc.).
Loads all assets defined in asset_define.json.
On completion (load.once('complete')):
Generates charaDefs from asset_define.json image keys (name_face convention).
Registers charaDefs to this.sys.registry.
Starts GameScene, UIScene, SystemScene.
Scene-Level DI (Dependency Injection):
GameScene: In create, gets configManager & charaDefs from this.sys.registry. Instantiates all other managers (StateManager, SoundManager, ScenarioManager) and MessageWindow.
Other Scenes (ConfigScene, NovelOverlayScene): Get required managers/data from this.sys.registry or init(data).
2.0 Execution Control (ScenarioManager.js)
Master Loop: next() -> parse()
next():
Guarded by isEnd and isWaitingClick.
Gets line from scenario[] at currentLine.
Increments currentLine.
Calls parse(line).
parse(line):
Primary responsibility: Determine if the current line requires waiting for user interaction or asynchronous tag completion.
Flow:
Skip Logic: If ifState.skipping is true, only processes control flow tags (if, else, etc.), then immediately calls this.next().
Dialogue/Text Line: Sets this.isWaitingClick = true. Calls messageWindow.setText(). Execution STOPS here. onClick resumes flow via next().
Tag Line ([...]):
Retrieves handler from tagHandlers.
Invokes handler. The handler is now responsible for resuming the scenario flow.
Handler Execution Protocol: CRITICAL
Synchronous Handlers (if, eval, er): Execute their logic, then MUST call manager.next() as their final action.
Asynchronous Handlers (chara_show, move, wait): Initiate მათი async operation (e.g., Tween). The completion callback (onComplete, delayedCall) MUST call manager.next().
Player-Wait Handlers (p, link): Set manager.isWaitingClick = true or manager.isWaitingChoice = true. MUST NOT call next().
Flow-Control Handlers (jump, return, call): Manipulate manager.currentLine/currentFile/callStack, then MUST call manager.next() to restart the loop from the new context.
3.0 Inter-Scene Communication Protocol (SystemScene & Events)
Mediator: SystemScene (always active, active:true). Listens for global events.
Flow: GameScene -> ActionScene (Full Transition)
[jump storage="ActionScene"] is parsed.
handleJump: Calls this.scene.start('ActionScene'). This stops GameScene and UIScene.
Flow: ActionScene -> GameScene (Return Journey)
ActionScene: On completion, emits 'return-to-novel' to SystemScene.
this.scene.get('SystemScene').events.emit('return-to-novel', { from: 'ActionScene', params: {...} });
Calls this.scene.stop().
SystemScene: Listens for 'return-to-novel'.
On event, calls this.scene.start('GameScene', { ...data... }) and this.scene.launch('UIScene').
GameScene: init(data) receives return data. create logic branches based on isResuming flag, calls performReturn to restore state and continue scenario.
Flow: ActionScene -> NovelOverlayScene (Overlay)
ActionScene: Emits 'request-overlay' to SystemScene.
this.scene.get('SystemScene').events.emit('request-overlay', { from: 'ActionScene', scenario: '...' });
ActionScene remains active.
SystemScene: Listens for 'request-overlay'.
On event, launches NovelOverlayScene with required data (charaDefs, scenario key).
NovelOverlayScene:
Runs its own ScenarioManager instance.
[overlay_end] tag is parsed.
handleOverlayEnd: Emits 'end-overlay' to SystemScene.
manager.scene.scene.get('SystemScene').events.emit('end-overlay', { from: 'NovelOverlayScene', returnTo: 'ActionScene' });
SystemScene: Listens for 'end-overlay'.
On event, stops NovelOverlayScene and re-enables input on the returnTo scene (e.g., ActionScene).
4.0 Save/Load Protocol
Data Source: StateManager.js.
performSave (GameScene):
Calls this.stateManager.getState(this.scenarioManager).
getState: Pulls latest dynamic state (ifStack, callStack, currentLine, etc.) from the passed ScenarioManager instance into its internal this.state object.
Returns a deep copy of this.state.
Saves the returned object to localStorage.
performLoad (GameScene):
Loads JSON from localStorage.
Calls rebuildScene(this, loadedState).
rebuildScene:
Clears all layers.
Calls manager.stateManager.setState(loadedState).
Manually sets manager.currentLine, manager.ifStack, manager.callStack, etc., from the loaded state.
Re-creates all visual objects (background, characters) based on the loaded state.
Restores isWaitingChoice/isWaitingClick states and re-displays UI (choices/next arrow) if necessary.
Calls this.scenarioManager.next() to resume flow from the restored currentLine, unless isWaitingChoice or isWaitingClick was restored to true.